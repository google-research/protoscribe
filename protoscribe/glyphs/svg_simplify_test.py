# Copyright 2024 The Protoscribe Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import xml.etree.ElementTree as ET

from absl.testing import absltest
from protoscribe.glyphs import svg_simplify as lib
from svgpathtools import svg_to_paths

_SVG_CONTENTS = """<?xml version="1.0" encoding="utf-8"?>
<svg
  version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"
  width="600" height="600" viewBox="0 0 600 600"
>
<path style="fill: none; stroke: 000000;" d="M0 92.42 C0 92.42 1.923 87.873 2.78 86.16 3.4 84.921 3.784 84.307 4.53 83.03 5.739 80.96 7.563 78.081 9.44 74.98 11.997 70.757 15.561 64.315 18.45 59.99 20.781 56.499 22.918 54.188 25.22 50.83 27.883 46.944 30.745 41.956 33.39 37.95 35.756 34.367 38.197 31.063 40.3 27.89 42.149 25.1 43.783 22.401 45.38 19.94 46.777 17.789 48.023 15.925 49.35 13.92 50.677 11.915 52.235 9.713 53.34 7.91 54.209 6.493 54.925 5.24 55.53 4.03 56.038 3.015 56.412 1.895 56.79 1.16 57.038 0.678 57.48 0 57.48 0 57.48 0 57.48 0 57.48 0 " transform="matrix(1.4872455600702508,0.08934196970717541,-0.08934196970717542,1.487245560070251,281.87712285963966,201.64123466839595)"/>
<path style="fill: none; stroke: 000000;" d="M0 31.11 C0 31.11 3.131 26.033 4.46 23.68 5.629 21.611 6.558 19.647 7.6 17.76 8.571 16.001 9.747 14.302 10.5 12.71 11.129 11.38 11.403 10.102 11.94 8.91 12.443 7.794 13.114 6.691 13.6 5.76 13.986 5.022 14.29 4.434 14.63 3.77 14.97 3.107 15.407 2.312 15.64 1.78 15.789 1.439 15.866 1.214 15.96 0.92 16.056 0.621 16.21 0 16.21 0 " transform="matrix(1.4872455600702508,0.08934196970717541,-0.08934196970717542,1.487245560070251,331.00165305723215,270.31044763510755)"/>
</svg>
"""

_SVG_WITH_GLYPH_AFFILIATION_CONTENTS = """<?xml version="1.0" encoding="utf-8"?>
<svg
  version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"
  width="600" height="600" viewBox="0 0 600 600"
>
<path style="fill: none; stroke: 000000;" d="M0 92.42 C0 92.42 1.923 87.873 2.78 86.16 3.4 84.921 3.784 84.307 4.53 83.03 5.739 80.96 7.563 78.081 9.44 74.98 11.997 70.757 15.561 64.315 18.45 59.99 20.781 56.499 22.918 54.188 25.22 50.83 27.883 46.944 30.745 41.956 33.39 37.95 35.756 34.367 38.197 31.063 40.3 27.89 42.149 25.1 43.783 22.401 45.38 19.94 46.777 17.789 48.023 15.925 49.35 13.92 50.677 11.915 52.235 9.713 53.34 7.91 54.209 6.493 54.925 5.24 55.53 4.03 56.038 3.015 56.412 1.895 56.79 1.16 57.038 0.678 57.48 0 57.48 0 57.48 0 57.48 0 57.48 0 " transform="matrix(1.4872455600702508,0.08934196970717541,-0.08934196970717542,1.487245560070251,281.87712285963966,201.64123466839595)" position-and-glyph="0,aardvark"/>
<path style="fill: none; stroke: 000000;" d="M0 31.11 C0 31.11 3.131 26.033 4.46 23.68 5.629 21.611 6.558 19.647 7.6 17.76 8.571 16.001 9.747 14.302 10.5 12.71 11.129 11.38 11.403 10.102 11.94 8.91 12.443 7.794 13.114 6.691 13.6 5.76 13.986 5.022 14.29 4.434 14.63 3.77 14.97 3.107 15.407 2.312 15.64 1.78 15.789 1.439 15.866 1.214 15.96 0.92 16.056 0.621 16.21 0 16.21 0 " transform="matrix(1.4872455600702508,0.08934196970717541,-0.08934196970717542,1.487245560070251,331.00165305723215,270.31044763510755)" position-and-glyph="1,platypus"/>
</svg>
"""

_SIMPLIFIED_SVG_CONTENTS_REFERENCE = """<?xml version="1.0" encoding="utf-8"?>
<svg baseProfile="full" height="600px" version="1.1" viewBox="261.74575205598495 191.04502526287197 117.49263155981023 163.77902989150897" width="431px" xmlns="http://www.w3.org/2000/svg" xmlns:ev="http://www.w3.org/2001/xml-events" xmlns:xlink="http://www.w3.org/1999/xlink">
  <defs />
  <path d="M 273.6201380193025,339.09246933008853 C 273.6201380193025,339.09246933008853 276.8863491675761,332.501768376196 278.3139614066647,330.0306827998347 C 279.34674835437545,328.2433775721262 279.97270661884266,327.3645161146105 281.1962815019711,325.5319526438024 C 283.17929926138993,322.56136877583293 286.149250693745,318.4425485611366 289.2178600580588,313.99829495649914 C 293.39803809323183,307.9461043728637 299.27412223817583,298.6836832549275 303.95717868020233,292.5094551581077 C 307.73584089697385,287.5257370392899 311.12055395083723,284.2796363392318 314.8442035643956,279.49113096278177 C 319.1519213851448,273.949612381679 323.85405592296524,266.7869282453505 328.14572435999804,261.06533204158455 C 331.984659632585,255.94791430018003 335.91021191262905,251.25213871776313 339.3213713953376,246.72099471795443 C 342.32055253139055,242.736772907347 344.991845752785,238.86868191921891 347.58684749966653,235.3512497215084 C 349.8567041239248,232.2769952534782 351.87634552330655,229.61608962376238 354.0290510307826,226.75271906962294 C 356.18175653825875,223.8893485154835 358.6956161381434,220.7536285810126 360.5001060534031,218.17084771273238 C 361.9191200161792,216.14105892578837 363.0959333252326,214.34150908933069 364.10382067242074,212.5959938533185 C 364.9500235161892,211.13182533045847 365.6063163617275,209.49952419985027 366.23416153116887,208.44016997774793 C 366.6460612594651,207.74547442628145 367.3639976524777,206.77661108716438 367.3639976524777,206.77661108716438 C 367.3639976524777,206.77661108716438 367.3639976524777,206.77661108716438 367.3639976524777,206.77661108716438" fill="none" stroke="#000000" stroke-width="5.0" />
  <path d="M 328.22222437964194,316.57865700889306 C 328.22222437964194,316.57865700889306 333.3323794084252,309.30764100756954 335.5191504124796,305.9268876824651 C 337.44258900752584,302.9542173812674 338.99970776133597,300.11626579114744 340.71800593176664,297.40292775172975 C 342.3192738953098,294.8736138641518 344.2200666804849,292.4518498139681 345.4821950029916,290.1514293855258 C 346.5364972799863,288.22958888957817 347.05818160073136,286.3533687635082 347.96332809438,284.6285486936372 C 348.81111824928854,283.01372165936147 349.9076042126827,281.4332382682775 350.7135829286742,280.0920328491298 C 351.35359408850525,279.0289316261049 351.8582498169544,278.1815911955746 352.42323637526385,277.2244364133884 C 352.9881335916036,276.26876887676224 353.7090867672715,275.1254510972684 354.1031449106521,274.3550531382528 C 354.3552101107727,273.86121435575524 354.48982996208224,273.53346343640686 354.65589758382276,273.1046113868987 C 354.82538640653195,272.6685017935296 355.1099035859709,271.7586809640609 355.1099035859709,271.7586809640609" fill="none" stroke="#000000" stroke-width="5.0" />
</svg>"""

# Total number of Bezier cubic segments in the above sketch.
_NUM_SEGMENTS = 23


class SvgSimplifyTest(absltest.TestCase):

  def setUp(self):
    super().setUp()
    ET.register_namespace("", lib.XML_SVG_NAMESPACE)

  def test_num_segments(self):
    paths, _ = svg_to_paths.svgstr2paths(_SVG_CONTENTS)
    self.assertEqual(lib.num_segments(paths), _NUM_SEGMENTS)

  def test_simplify_svg_tree(self):
    tree = ET.ElementTree(ET.fromstring(_SVG_CONTENTS))
    simplified_tree, num_paths, num_segments = lib.simplify_svg_tree(tree)
    self.assertEqual(2, num_paths)
    self.assertEqual(_NUM_SEGMENTS, num_segments)

    # Check that all the original XML attributes excluding the transforms are
    # in the modified tree.
    paths = simplified_tree.findall("path")
    self.assertLen(paths, num_paths)
    for path_elt in paths:
      self.assertIn("d", path_elt.attrib)
      self.assertIn("fill", path_elt.attrib)
      self.assertIn("stroke", path_elt.attrib)
      self.assertNotIn("transform", path_elt.attrib)

  def test_simplify_svg_tree_with_glyph_affiliations(self):
    tree = ET.ElementTree(ET.fromstring(_SVG_WITH_GLYPH_AFFILIATION_CONTENTS))
    simplified_tree, num_paths, num_segments = lib.simplify_svg_tree(tree)
    self.assertEqual(2, num_paths)
    self.assertEqual(_NUM_SEGMENTS, num_segments)

    # Check that the paths have glyph affiliations.
    paths = simplified_tree.findall("path")
    self.assertLen(paths, num_paths)
    self.assertIn(lib.XML_SVG_POSITION_AND_GLYPH, paths[0].attrib)
    self.assertEqual(
        "0,aardvark", paths[0].attrib[lib.XML_SVG_POSITION_AND_GLYPH]
    )
    self.assertIn(lib.XML_SVG_POSITION_AND_GLYPH, paths[1].attrib)
    self.assertEqual(
        "1,platypus", paths[1].attrib[lib.XML_SVG_POSITION_AND_GLYPH]
    )

  def test_simplify_svg_str(self):
    simplified_svg, num_paths, num_segments = lib.simplify_svg_str(
        _SVG_CONTENTS
    )
    self.assertEqual(2, num_paths)
    self.assertEqual(_NUM_SEGMENTS, num_segments)
    self.assertEqual(simplified_svg, _SIMPLIFIED_SVG_CONTENTS_REFERENCE)


if __name__ == "__main__":
  absltest.main()
