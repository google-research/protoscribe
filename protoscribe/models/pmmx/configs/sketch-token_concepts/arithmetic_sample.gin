# Copyright 2024 The Protoscribe Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Arithmetic sampling: "Arithmetic Sampling: Parallel Diverse Decoding for Large
# Language Models" (2023).
#   Paper: https://proceedings.mlr.press/v202/vilnis23a/vilnis23a.pdf
#   Implementation: https://github.com/google-research/google-research/tree/master/arithmetic_sampling/

from __gin__ import dynamic_registration

from protoscribe.pmmx import arithmetic_sampling as decoding
from protoscribe.pmmx import models

# If non-zero only use the top-k logits to sample next token, otherwise don't
# use any cutoff and sample from full logits over vocabulary. Both TOPK and
# TOPP defined below cannot be non-zero.
SAMPLING_TOPK = 40

# If non-zero, only use the smallest number of logits whose cumulative sum of
# probs adds up to (at least) TOPP.
SAMPLING_TOPP = 0.

# Sampling temperature.
TEMPERATURE = 0.6

models.MultimodalEncoderDecoderModel:
  decode_fn = @decoding.arithmetic_sample

decoding.arithmetic_sample:
  topk = %SAMPLING_TOPK
  topp = %SAMPLING_TOPP
  temperature = %TEMPERATURE
